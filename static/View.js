// Generated by CoffeeScript 1.6.3
var Cursor, HydraBuffer, View;

HydraBuffer = require('./HydraBuffer');

Cursor = require('./Cursor');

module.exports = View = (function() {
  function View(o) {
    this.tab = o.tab;
    if (o.active) {
      this.tab.active_view = this;
    }
    this.resize({
      x: o.x,
      y: o.y,
      w: o.w,
      h: o.h,
      dont_draw: true
    });
    this.cursors = [
      new Cursor({
        user: Window.current_user,
        view: this,
        x: 1,
        y: 1
      })
    ];
    this.buffer = HydraBuffer({
      view: this,
      file: o.file
    });
    this.lines = this.buffer.data.split("\n");
    this.lines.pop();
    if (!(this.lines.length >= 1)) {
      this.lines = [''];
    }
    this.gutter = repeat(Math.max(3, this.lines.length.toString().length + 2), ' ');
    this.draw();
    Window.set_status("\"" + this.buffer.alias + "\", " + this.lines.length + "L, " + this.buffer.data.length + "C");
  }

  View.prototype.resize = function(o) {
    Logger.out("View.resize(" + (JSON.stringify(o)) + ")");
    this.x = o.x;
    if (this.x < 1) {
      die("View.x may not be less than 1!");
    }
    this.y = o.y;
    if (this.y < 1) {
      die("View.y may not be less than 1!");
    }
    this.w = o.w;
    if (this.w < 1) {
      die("View.w may not be less than 1!");
    }
    this.h = o.h;
    if (this.h < 2) {
      die("View.h may not be less than 2!");
    }
    this.ih = o.h - 1;
    if (!o.dont_draw) {
      return this.draw();
    }
  };

  View.prototype.draw_status_bar = function() {
    var h, w, x, y;
    x = this.x;
    y = this.y + this.h;
    w = this.w;
    h = 1;
    Terminal.clear_space({
      x: x,
      y: y,
      w: w,
      h: h,
      fg: 255,
      bg: 196
    });
    return Terminal.echo("view status bar");
  };

  View.prototype.draw = function() {
    var line, ln, y, yy, _i, _j, _ref;
    Logger.out('View.draw() was called.');
    this.draw_status_bar();
    yy = Math.min(this.lines.length, this.ih);
    ln = 0;
    if (ln < this.lines.length) {
      for (ln = _i = 0; 0 <= yy ? _i < yy : _i > yy; ln = 0 <= yy ? ++_i : --_i) {
        line = this.lines[ln];
        Terminal.xbg(NviConfig.gutter_bg).xfg(NviConfig.gutter_fg).go(this.x, this.y + ln).echo((this.gutter + (ln + 1)).substr((this.gutter.length - 1) * -1) + ' ');
        if (line.length > this.w) {
          line = line.substr(0, this.w - 1) + '>';
        }
        Terminal.xbg(NviConfig.text_bg).xfg(NviConfig.text_fg).echo(line).clear_eol();
      }
    }
    if (ln < this.ih) {
      for (y = _j = ln, _ref = this.ih; ln <= _ref ? _j < _ref : _j > _ref; y = ln <= _ref ? ++_j : --_j) {
        Terminal.xbg(NviConfig.gutter_bg).xfg(NviConfig.gutter_fg).go(this.x, this.y + y).fg('bold').echo('~').fg('unbold');
      }
    }
    return Terminal.go(this.x + this.gutter.length, this.y + 0).xfg(255);
  };

  return View;

})();
