// Generated by CoffeeScript 1.6.3
var BufferView, Cell;

BufferView = require('./BufferView');

module.exports = Cell = (function() {
  function Cell(o) {
    this.p = o.p;
    this.next = this.prev = null;
    this.first_child = null;
    this.view = o.view || null;
    if (o.origin) {
      this.next = o.origin;
      if (o.origin.prev) {
        this.prev = o.origin.prev;
      }
      o.origin.prev = this;
      this.chain = o.origin.chain;
    } else {
      this.chain = {
        dir: o.dir || 'v',
        parent: o.parent || null,
        x: o.parent ? o.parent.x : o.chain.x,
        y: o.parent ? o.parent.y : o.chain.y,
        w: o.parent ? o.parent.w : o.chain.w,
        h: o.parent ? o.parent.h : o.chain.h
      };
    }
    this.x = this.y = this.w = this.h = null;
    this.resize({
      chain: {
        x: this.chain.x,
        y: this.chain.y,
        w: this.chain.w,
        h: this.chain.h
      }
    });
  }

  Cell.prototype.resize = function(o) {
    var i, pc;
    if (o != null ? o.chain : void 0) {
      if (o.chain.x) {
        this.chain.x = o.chain.x;
      }
      if (this.chain.x < 1) {
        die("Cell.chain.x may not be less than 1!");
      }
      if (o.chain.y) {
        this.chain.y = o.chain.y;
      }
      if (this.chain.y < 1) {
        die("Cell.chain.y may not be less than 1!");
      }
      if (o.chain.w) {
        this.chain.w = o.chain.w;
      }
      if (this.chain.w < 1) {
        die("Cell.chain.w may not be less than 1!");
      }
      if (o.chain.h) {
        this.chain.h = o.chain.h;
      }
      if (this.chain.h < 1) {
        die("Cell.chain.h may not be less than 1!");
      }
    }
    i = 0;
    pc = {
      x: this.chain.x,
      y: this.chain.y,
      w: this.chain.w,
      h: this.chain.h
    };
    this.each_neighbor(function(cell) {
      var affected_content;
      switch (cell.chain.dir) {
        case 'v':
          cell.x = pc.x + (i * pc.w);
          cell.y = pc.y;
          cell.w = Math.floor(cell.p * cell.chain.w);
          cell.h = cell.chain.h;
          break;
        case 'h':
          cell.x = pc.x;
          cell.y = pc.y + (i * pc.h);
          cell.w = cell.chain.w;
          cell.h = Math.floor(cell.p * cell.chain.h);
      }
      if (cell.x < 1) {
        die("Cell.x may not be less than 1!");
      }
      if (cell.y < 1) {
        die("Cell.y may not be less than 1!");
      }
      if (cell.w < 1) {
        die("Cell.w may not be less than 1!");
      }
      if (cell.h < 1) {
        die("Cell.h may not be less than 1!");
      }
      if (affected_content = this.view || this.first_child) {
        affected_content.resize({
          x: cell.x,
          y: cell.y,
          w: cell.w,
          h: cell.h
        });
      }
      i++;
      pc = cell;
    });
  };

  Cell.prototype.draw = function() {};

  Cell.prototype.new_view = function(o) {
    o.x = this.x;
    o.y = this.y;
    o.w = this.w;
    o.h = this.h;
    this.view = new BufferView(o);
    this.view.cell = this;
    o.tab.views.push(this.view);
    return this.view;
  };

  Cell.prototype.each_neighbor = function(cb) {
    var c;
    cb(c = this, 'origin');
    while (c.prev) {
      cb(c = c.prev, 'prev');
    }
    c = this;
    while (c.next) {
      cb(c = c.next, 'next');
    }
  };

  Cell.prototype.divide = function(view) {
    var neighbor, neighbors, new_neighbor, p, _i, _len;
    neighbors = [];
    this.each_neighbor(function(neighbor, dir) {
      neighbors[dir === 'prev' ? 'unshift' : 'push'](neighbor);
    });
    p = 1 / (neighbors.length + 1);
    for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
      neighbor = neighbors[_i];
      neighbor.p = p;
    }
    new_neighbor = new Cell({
      origin: this,
      p: p
    });
    this.resize();
    return new_neighbor.new_view(view);
  };

  Cell.prototype.impregnate = function(dir, view) {
    var detached_view;
    if (!(this.prev || this.next)) {
      die("must have more than one cell in the chain to impregnate");
    }
    if (this.first_child) {
      die("must not already be impregnated to impregnate");
    }
    detached_view = this.view;
    this.view = null;
    this.first_child = new Cell({
      p: 1,
      dir: dir,
      parent: this,
      view: detached_view
    });
    return this.first_child.divide(view);
  };

  Cell.prototype.vsplit = function(view) {
    return this.divide(view);
  };

  Cell.prototype.hsplit = function(view) {
    if (this.prev || this.next) {
      return this.impregnate('h', view);
    } else {
      this.chain.dir = 'h';
      return this.divide(view);
    }
  };

  Cell.prototype.destroy = function(o) {
    var closest_view, other, survivor, tab, topmost_cell;
    if (tab.views.length < 2) {
      return false;
    }
    if (this.prev) {
      this.prev.next = this.next;
    }
    if (this.next) {
      this.next.prev = this.prev;
    }
    if (this.chain.parent.prev === null && this.chain.parent.next === null) {
      this.chain.parent.destroy();
    }
    this.destroyed = true;
    closest_view = function() {
      var n;
      if (this.view) {
        return this.view;
      } else if (this.first_child) {
        n = this;
        while (n.first_child) {
          n = n.first_child;
        }
        return n.view;
      }
    };
    tab = closest_view().tab;
    if (tab.topmost_cell.destroyed) {
      other = this.prev || this.next;
      topmost_cell = function() {
        var n;
        n = other;
        while (n.chain.parent) {
          n = n.chain.parent;
        }
        return n;
      };
      tab.topmost_cell = topmost_cell();
      tab.resize();
    } else {
      if (survivor = this.prev || this.next) {
        survivor.resize();
      }
    }
    return true;
  };

  return Cell;

})();
