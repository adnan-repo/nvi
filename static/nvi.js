// Generated by CoffeeScript 1.6.3
var clear_eol, clear_screen, die, gutter_bg, gutter_fg, keypress, repeat, terminal, text_bg, text_fg;

keypress = require('keypress');

terminal = require('./terminal');

global.logger = require('./logger');

global.delay = function(s, f) {
  return setTimeout(f, s);
};

global.interval = function(s, f) {
  return setInterval(f, s);
};

logger.out('---');

process.stdin.setRawMode(true);

keypress(process.stdin);

keypress.enableMouse(process.stdout);

die = function(err) {
  process.stdin.resume();
  terminal.fg('reset').bg('reset').clear().go(1, 1);
  process.stderr.write(err + "\n\n");
  return process.exit(1);
};

if (!process.stdout.isTTY) {
  die('must be in a tty');
}

terminal.screen.w = process.stdout.columns;

terminal.screen.h = process.stdout.rows;

process.stdout.on('resize', function() {
  logger.out("caught resize " + process.stdout.columns + ", " + process.stdout.rows);
  terminal.screen.w = process.stdout.columns;
  return terminal.screen.h = process.stdout.rows;
});

process.stdin.on('keypress', function(ch, key) {
  logger.out("got keypress", JSON.stringify(arguments));
  if (key && key.ctrl && key.name === 'c') {
    return die('done');
  }
});

process.stdin.on('mousepress', function(info) {
  return logger.out("caught mousepress: " + JSON.stringify(info));
});

process.on('exit', function() {
  return keypress.disableMouse(process.stdout);
});

text_fg = 255;

text_bg = 235;

gutter_bg = 234;

gutter_fg = 240;

repeat = function(n, s) {
  var i, o, _i;
  o = '';
  for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
    o += s;
  }
  return o;
};

clear_screen = function() {
  var x, y, _i, _j, _ref, _ref1;
  terminal.xbg('reset').xfg('reset').clear();
  terminal.xbg(gutter_bg).xfg(gutter_fg);
  for (x = _i = 0, _ref = terminal.screen.w; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
    for (y = _j = 0, _ref1 = terminal.screen.y; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
      process.stdout.write(' ');
    }
  }
  return terminal.go(1, 1);
};

clear_eol = function() {
  var w_delta;
  w_delta = terminal.screen.w - terminal.cursor.x;
  logger.out("terminal.screen.w is " + terminal.screen.w);
  logger.out("terminal.cursor.x is " + terminal.cursor.x);
  logger.out("w_delta is " + w_delta);
  return terminal.echo(repeat(w_delta, ' '));
};

terminal.go(0, 0).xbg(gutter_bg).xfg(gutter_fg).clear().echo('   1 ');

terminal.xbg(text_bg).xfg(text_fg).echo("how is this?                           \n");

terminal.xbg(gutter_bg).xfg(gutter_fg).echo('   2 ');

terminal.xbg(text_bg).xfg(text_fg).echo("hehe                                   \n");

terminal.xbg(gutter_bg).xfg(gutter_fg).echo("                                            \n");

terminal.xbg(gutter_bg).xfg(gutter_fg).echo("                                            \n");

terminal.xbg(gutter_bg).xfg(gutter_fg).echo("                                            \n");

terminal.xbg(gutter_bg).xfg(gutter_fg).echo("                                            \n");

terminal.xbg(gutter_bg).xfg(gutter_fg).echo("                                            \n");

/*
terminal.xbg(gutter_bg).xfg(gutter_fg)#.clear()
clear_screen()
#terminal.go(1,1).echo('  1 ').xfg(text_fg).xbg(text_bg).echo("how is this?")
##terminal.esc terminal.esc.CLEAR_EOL
#clear_eol()
#terminal.xbg(gutter_bg).xfg(gutter_fg).go(1,2).echo('~   ')
##terminal.esc terminal.esc.CLEAR_EOL
#terminal.go(16,1).xfg(255)
*/


process.stdin.resume();
