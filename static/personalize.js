// Generated by CoffeeScript 1.6.3
/* TODO:
* arrow keys cursor movement
* lclick to place cursor
* lclick+drag to highlight
* double-lclick to highlight word
* triple-lclick to highlight line
*/

var Cursor, HydraBuffer, Tab, User, View, Window, fs;

fs = require('fs');

User = (function() {
  function User() {
    this.id = '';
    this.name = '';
    this.email = '';
    this.color = null;
    this.views = [];
  }

  return User;

})();

Cursor = (function() {
  function Cursor() {
    this.user = new User;
    this.view = View;
    this.x = null;
    this.y = null;
    this.w = 1;
    this.h = 1;
  }

  return Cursor;

})();

HydraBuffer = (function() {
  function HydraBuffer() {
    this.view = View;
    this.buffer = Buffer;
    this.cursors = [];
  }

  HydraBuffer.from_file = function(filename) {
    return fs.open(filename, 'r', function(err, fd) {
      var buffer;
      buffer = new Buffer(100);
      return fs.read(fd, buffer, 0, buffer.length, 0, function(err, bytesRead, buffer) {
        return b.toString('utf8');
      });
    });
  };

  return HydraBuffer;

})();

Window = (function() {
  function Window() {}

  Window.init = function(nvi) {
    this.tabs = [
      new Tab({
        window: this
      })
    ];
    process.stdout.on('resize', Window.resize);
    return Window.resize();
  };

  Window.resize = function() {
    var tab, _i, _len, _ref;
    this.h = process.stdout.rows;
    _ref = this.tabs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tab = _ref[_i];
      tab.resize();
    }
    return Window.draw();
  };

  Window.draw = function() {
    var tab, _i, _len, _ref, _results;
    terminal.xbg(config.gutter_bg).clear_screen();
    _ref = this.tabs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tab = _ref[_i];
      _results.push(tab.draw());
    }
    return _results;
  };

  return Window;

})();

Tab = (function() {
  function Tab(o) {
    this.window = o.window;
    this.name = (o != null ? o.name : void 0) || 'untitled';
    this.views = [
      new View({
        tab: this
      })
    ];
  }

  Tab.prototype.resize = function() {
    var view, _i, _len, _ref;
    _ref = this.views;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view = _ref[_i];
      view.resize();
    }
    return this.draw();
  };

  Tab.prototype.draw = function() {
    var view, _i, _len, _ref, _results;
    _ref = this.views;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view = _ref[_i];
      _results.push(view.draw());
    }
    return _results;
  };

  return Tab;

})();

View = (function() {
  function View(o) {
    this.tab = o.tab;
    this.hydrabuffer = HydraBuffer;
    this.user = User;
    this.w = null;
    this.h = null;
    this.offset = null;
  }

  View.prototype.resize = function() {
    return this.draw();
  };

  View.prototype.draw = function() {
    var y, _i, _ref, _ref1;
    terminal.xbg(config.gutter_bg).xfg(config.gutter_fg).go(1, 1).echo('  1 ');
    terminal.xbg(config.text_bg).xfg(config.text_fg).echo("how is this?").clear_eol();
    terminal.xbg(config.gutter_bg).xfg(config.gutter_fg).echo('  2 ');
    terminal.xbg(config.text_bg).xfg(config.text_fg).echo("hehe").clear_eol();
    for (y = _i = _ref = terminal.cursor.y, _ref1 = terminal.screen.h; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; y = _ref <= _ref1 ? ++_i : --_i) {
      terminal.xbg(config.gutter_bg).xfg(config.gutter_fg).go(1, y).fg('bold').echo('~').fg('unbold');
    }
    return terminal.go(8, 2).xfg(255);
  };

  return View;

})();

module.exports = function(nvi) {
  var _this = this;
  logger.out('will personalize');
  Window.init(nvi);
  return process.stdin.on('keypress', function(ch, key) {
    switch (key.name) {
      case 'left':
        return terminal.move(-1);
      case 'right':
        return terminal.move(1);
      case 'up':
        return terminal.move(0, -1);
      case 'down':
        return terminal.move(0, 1);
    }
  });
};
